[gd_scene load_steps=13 format=3 uid="uid://c1rcvecrt05vc"]

[ext_resource type="Script" path="res://SCRIPTS/GAME/generation.gd" id="1_q3n4d"]
[ext_resource type="PackedScene" uid="uid://bdm4flyohl4eh" path="res://SCENES/LEVELS/LEVEL_1.tscn" id="2_bw4vc"]
[ext_resource type="PackedScene" uid="uid://cnnekp1siotkw" path="res://SCENES/BLUEPRINTS/PLAYER/PLAYER.tscn" id="3_uas63"]
[ext_resource type="Script" path="res://SCRIPTS/GAME/always_run.gd" id="4_67hq5"]

[sub_resource type="Shader" id="Shader_got4i"]
code = "
// NOTE: Shader automatically converted from Godot Engine 4.3.stable's ProceduralSkyMaterial.

shader_type sky;
render_mode use_debanding;

uniform vec4 sky_top_color : source_color = vec4(0.385, 0.454, 0.55, 1.0);
uniform vec4 sky_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float sky_curve : hint_range(0, 1) = 0.15;
uniform float sky_energy = 1.0; // In Lux.
uniform sampler2D sky_cover : filter_linear, source_color, hint_default_black;
uniform vec4 sky_cover_modulate : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 ground_bottom_color : source_color = vec4(0.2, 0.169, 0.133, 1.0);
uniform vec4 ground_horizon_color : source_color = vec4(0.646, 0.656, 0.67, 1.0);
uniform float ground_curve : hint_range(0, 1) = 0.02;
uniform float ground_energy = 1.0;
uniform float sun_angle_max = 30.0;
uniform float sun_curve : hint_range(0, 1) = 0.15;
uniform float exposure : hint_range(0, 128) = 1.0;

uniform sampler2D cloud_texture;
uniform sampler2D cloud_texture2;
uniform vec2 cloud_dir;
uniform vec2 cloud_dir2;
uniform vec2 cloud_scale;
uniform float cloud_dist;
uniform float cloud_speed;
uniform float cloud_speed2;

void sky() {
	float v_angle = acos(clamp(EYEDIR.y, -1.0, 1.0));
	float c = (1.0 - v_angle / (PI * 0.5));
	vec3 sky = mix(sky_horizon_color.rgb, sky_top_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / sky_curve), 0.0, 1.0));
	sky *= sky_energy;

	if (LIGHT0_ENABLED) {
		float sun_angle = acos(dot(LIGHT0_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT0_SIZE) {
			sky = LIGHT0_COLOR * LIGHT0_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT0_SIZE) / (sun_angle_max - LIGHT0_SIZE);
			sky = mix(LIGHT0_COLOR * LIGHT0_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT1_ENABLED) {
		float sun_angle = acos(dot(LIGHT1_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT1_SIZE) {
			sky = LIGHT1_COLOR * LIGHT1_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT1_SIZE) / (sun_angle_max - LIGHT1_SIZE);
			sky = mix(LIGHT1_COLOR * LIGHT1_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT2_ENABLED) {
		float sun_angle = acos(dot(LIGHT2_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT2_SIZE) {
			sky = LIGHT2_COLOR * LIGHT2_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT2_SIZE) / (sun_angle_max - LIGHT2_SIZE);
			sky = mix(LIGHT2_COLOR * LIGHT2_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	if (LIGHT3_ENABLED) {
		float sun_angle = acos(dot(LIGHT3_DIRECTION, EYEDIR));
		if (sun_angle < LIGHT3_SIZE) {
			sky = LIGHT3_COLOR * LIGHT3_ENERGY;
		} else if (sun_angle < sun_angle_max) {
			float c2 = (sun_angle - LIGHT3_SIZE) / (sun_angle_max - LIGHT3_SIZE);
			sky = mix(LIGHT3_COLOR * LIGHT3_ENERGY, sky, clamp(1.0 - pow(1.0 - c2, 1.0 / sun_curve), 0.0, 1.0));
		}
	}

	vec4 sky_cover_texture = texture(sky_cover, SKY_COORDS);
	sky += (sky_cover_texture.rgb * sky_cover_modulate.rgb) * sky_cover_texture.a * sky_cover_modulate.a * sky_energy;

	c = (v_angle - (PI * 0.5)) / (PI * 0.5);
	vec3 ground = mix(ground_horizon_color.rgb, ground_bottom_color.rgb, clamp(1.0 - pow(1.0 - c, 1.0 / ground_curve), 0.0, 1.0));
	ground *= ground_energy;

	vec2 sky_uv =  EYEDIR.xz / EYEDIR.y;
	vec3 clouds = texture(cloud_texture, sky_uv * cloud_scale + TIME * cloud_dir * cloud_speed).rgb - texture(cloud_texture2, sky_uv * cloud_scale + TIME * cloud_dir2 * cloud_speed2).rgb;
	clouds = clamp(clouds, 0.0, 1.0);
	sky += clouds;
	
	COLOR = mix(ground, sky, step(0.0, EYEDIR.y)) * exposure;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_1gu8r"]
fractal_lacunarity = 0.0
fractal_gain = 0.0
fractal_weighted_strength = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_5uolp"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_1gu8r")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_8l2ey"]
seed = 1
fractal_gain = 0.4
fractal_weighted_strength = 0.4

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_tuq82"]
width = 1024
height = 1024
seamless = true
noise = SubResource("FastNoiseLite_8l2ey")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_npesu"]
shader = SubResource("Shader_got4i")
shader_parameter/sky_top_color = Color(0.385, 0.454, 0.55, 1)
shader_parameter/sky_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
shader_parameter/sky_curve = 0.15
shader_parameter/sky_energy = 1.0
shader_parameter/sky_cover_modulate = Color(1, 1, 1, 1)
shader_parameter/ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
shader_parameter/ground_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
shader_parameter/ground_curve = 0.02
shader_parameter/ground_energy = 1.0
shader_parameter/sun_angle_max = 0.523599
shader_parameter/sun_curve = 0.15
shader_parameter/exposure = 1.0
shader_parameter/cloud_dir = Vector2(-1, 1)
shader_parameter/cloud_dir2 = Vector2(1, 1)
shader_parameter/cloud_scale = Vector2(0.05, 0.05)
shader_parameter/cloud_dist = 1.0
shader_parameter/cloud_speed = 0.002
shader_parameter/cloud_speed2 = 0.003
shader_parameter/cloud_texture = SubResource("NoiseTexture2D_5uolp")
shader_parameter/cloud_texture2 = SubResource("NoiseTexture2D_tuq82")

[sub_resource type="Sky" id="Sky_axleg"]
sky_material = SubResource("ShaderMaterial_npesu")

[sub_resource type="Environment" id="Environment_ollus"]
background_mode = 2
sky = SubResource("Sky_axleg")

[node name="Main" type="Node3D"]
script = ExtResource("1_q3n4d")

[node name="Spawn_position" type="Node3D" parent="."]

[node name="Node3D" parent="." instance=ExtResource("2_bw4vc")]

[node name="Timer" type="Timer" parent="."]
one_shot = true
autostart = true

[node name="CharacterBody3D" parent="." instance=ExtResource("3_uas63")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.47206, 0.1, 0.19859)

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_ollus")

[node name="ALWAYS RUN" type="Node" parent="."]
process_mode = 3
script = ExtResource("4_67hq5")

[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
